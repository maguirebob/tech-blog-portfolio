// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  AUTHOR
  author
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @map("username")
  email        String   @unique @map("email")
  passwordHash String   @map("password_hash")
  firstName    String?  @map("first_name")
  lastName     String?  @map("last_name")
  bio          String?
  avatar       String?
  role         Role     @default(USER)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastLogin    DateTime? @map("last_login")

  // Relations
  articles     Article[]
  projects     Project[]
  comments     Comment[]

  @@map("Users")
  @@index([username])
  @@index([email])
  @@index([role, isActive])
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // Hex color for UI
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  articles    Article[]

  @@map("Categories")
  @@index([slug])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  articles  ArticleTag[]

  @@map("Tags")
  @@index([slug])
}

model Article {
  id          Int           @id @default(autoincrement())
  title       String
  slug        String        @unique
  excerpt     String?
  content     String        // Markdown content
  status      ArticleStatus @default(DRAFT)
  featured    Boolean       @default(false)
  viewCount   Int           @default(0) @map("view_count")
  publishedAt DateTime?     @map("published_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Foreign Keys
  authorId    Int           @map("author_id")
  categoryId  Int           @map("category_id")

  // Relations
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    Category      @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  tags        ArticleTag[]
  comments    Comment[]

  @@map("Articles")
  @@index([slug])
  @@index([status, publishedAt])
  @@index([featured, status])
  @@index([authorId])
  @@index([categoryId])
}

model ArticleTag {
  articleId Int @map("article_id")
  tagId     Int @map("tag_id")

  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("ArticleTags")
}

model Project {
  id          Int           @id @default(autoincrement())
  title       String
  slug        String        @unique
  description String
  content     String?       // Detailed project description
  imageUrl    String?       @map("image_url")
  demoUrl     String?       @map("demo_url")
  githubUrl   String?       @map("github_url")
  status      ProjectStatus @default(PLANNING)
  featured    Boolean       @default(false)
  order       Int           @default(0) // For custom ordering
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Foreign Keys
  authorId    Int           @map("author_id")

  // Relations
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  technologies ProjectTechnology[]

  @@map("Projects")
  @@index([slug])
  @@index([status, featured])
  @@index([authorId])
  @@index([order])
}

model Technology {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  icon      String?  // Icon class or URL
  color     String?  // Hex color
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  projects  ProjectTechnology[]

  @@map("Technologies")
  @@index([slug])
}

model ProjectTechnology {
  projectId     Int @map("project_id")
  technologyId  Int @map("technology_id")

  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technology    Technology  @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@id([projectId, technologyId])
  @@map("ProjectTechnologies")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Foreign Keys
  authorId  Int      @map("author_id")
  articleId Int      @map("article_id")

  // Relations
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("Comments")
  @@index([articleId])
  @@index([authorId])
  @@index([approved])
}

model SiteStats {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("SiteStats")
  @@index([key])
}
